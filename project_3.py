# -*- coding: utf-8 -*-
"""Project 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A0yC_86J7kbd5BJB4bJ5CU2BHVohAx3t
"""

#Project 3: Crime Stats in Phoenix, AZ [Basics] Tiffany Aihara

"""**Goal:**  "You need to import this data and make some sense of it. That might include some combination of:

Grouping crimes by location type or by zip code (or groups of zip codes).
Or, on the contrary, looking at types of crimes and where they are most common.
Would be good to know which areas have the fastest growing and shrinking crime rates.
Might even be worth grouping crimes by violent and non-violent?"
"""

#Library Imports
import pandas as pd 
import numpy as np
import matplotlib as plot

#nrows = just 100 as of now; REAL total is 131677 
crime_stats = pd.read_csv('crimestat (1).csv', delimiter=',', nrows = 1000, index_col='INC NUMBER')

"""# **Location (ZIP) & Crime-Type**
The first few lines of code pulls data based on zip code and crime category. The *occurrence* shows 10 results of the zip codes with the "most" reported crime category. As seen later, zip codes can have multiple types of crime reported in the area. This data reflects which type of crime in zip occurs most frequently. 

"""

occurrence = crime_stats.get(['ZIP', 'UCR CRIME CATEGORY']).value_counts()

occurrence  #TOP 10 OCCURANCES

"""The next few lines of codes looks for the highest occurances in zip codes. Since the data set is large, this line looks at the first 10 results. This code does not specify the type of crime, just the number of times the zip code showed in the file. 

"""

#TOP 10 MOST REPORTED ZIPS 
highest_reports = crime_stats['ZIP'].value_counts().head(10)
highest_reports

"""**Most/Least:** After looking at the occurances for zip code, I decided to look into a comparison between the "most" reported and "least" reported zip code. The value_counts(), by default, will sort the findings in numerical order. By adding the .keys() method and indexing the first and last item of the list, we are able to get the value of the most & least appeared zip code which can be seen as "safest" and "active." 

**Getting the UCR Details:** Using the get_group method, we are able to use the zip code from above to get the crime category's counts. This was done for both zip codes. 

**Highest Zip Code:** The highest zip code was graphed. 
"""

#Most Reported Zip Code vs. Least Reported Zip Code (1 ZIP COMPARISON)
least =  crime_stats['ZIP'].value_counts(ascending = True).keys()[0]
most = crime_stats['ZIP'].value_counts().keys()[0]

## -- Getting UCR Details --- 
zip = crime_stats.groupby('ZIP')
least_data = zip.get_group(least).get(['UCR CRIME CATEGORY']).value_counts()
most_data = zip.get_group(most).get(['UCR CRIME CATEGORY']).value_counts() 

# -- Highest Risk Zip Code Graph -- 
most_data.plot(kind = 'barh', color = '#aaf2d1')
plot.pyplot.title('Highest Risk Zip: ' + str(most))
plot.pyplot.xlabel('# of Reports')
plot.pyplot.ylabel('Crime Category')

"""**Lowest Zip Code:** The for-loop serves to see if there was any other zip codes with the same report count. From the print statement (that is commented out), there were only two results with one report. 

**Graph:** The graph shows the category and count. I tried making a side by side graph of the two zip codes, but since the y-axis is a "tuple" it was not reading to pandas... 
**I might look into this further** 
"""

#Check the lowest (should be 1) 
low = crime_stats['ZIP'].value_counts(ascending = True).keys()[0:2]
check = [] 
for each_zip in low: 
  check.append(zip.get_group(each_zip).get(['UCR CRIME CATEGORY']).value_counts()) 

#print(check)

# ---- Lowest Risk Zip Codes Graph -- 
low_data1 = zip.get_group(low[0]).get(['UCR CRIME CATEGORY']).value_counts()
low_data2 = zip.get_group(low[1]).get(['UCR CRIME CATEGORY']).value_counts()

low_data1.plot(kind = 'barh', color = 'yellow')
plot.pyplot.title('Lowest Risk Zip: ' + str(low[0]))
plot.pyplot.xlabel('# of Reports')
plot.pyplot.ylabel('Crime Category')

low_data2.plot(kind = 'barh', color = 'green')
plot.pyplot.title('Lowest Risk Zip: ' + str(low[1]))
plot.pyplot.xlabel('# of Reports')
plot.pyplot.ylabel('Crime Category')

"""# **Crime v. Occurrence**
The code below creates a table of the occurances of the crime type. This data's purpose can infer (especially in high risk areas) of what time a type of crime takes place. It can bring awareness for residents to stay in doors, predict & prevent future crime, or increase caution/protocol during "x" hour. 

**time:** The code below shows the value counts for occurance with crime type. 
"""

#crime_stats.head() 
time =  crime_stats.get(['OCCURRED ON','UCR CRIME CATEGORY']).value_counts(ascending = False) 

time_df = pd.DataFrame(time)
time_df

"""#**Crime Category & Premise Type:**
The next few lines of code will analyze the counts for crime type in a specific premise type. From just analyzing the value counts for premise type, the most common places for crimes to take place are single family house, apartment, retail business, and parking lots. 
"""

prem_count = crime_stats.get('PREMISE TYPE').value_counts() 
prem_count
#VISUALLY SEE WHICH ARE THE "TOP REPORTED CRIME BY CATEGORY"
#prem_crime

"""**Single Family House v. Apartments:** From the results above, I decided to look into single family households and apartments as the it's frequency and value count was high. The first graph shows the likelihood of what a single family house hold may be "at risk" to. """

#--- SINGLE FAMILY HOUSE 
prem = crime_stats.groupby('PREMISE TYPE')

single = prem.get_group('SINGLE FAMILY HOUSE')
s_count = single['UCR CRIME CATEGORY'].value_counts()

s_count.plot.barh(color = 'pink')
plot.pyplot.title('Single Family House')
plot.pyplot.xlabel('# of Reports')
plot.pyplot.ylabel('Crime Type')

apartment = prem.get_group('APARTMENT')
apartment_count = apartment['UCR CRIME CATEGORY'].value_counts()

"""The # of reports for apartments is significantly (about 100+) less than single family households. However, the likelihood of a motor vehicle theft is much higher than a single family household. """

apartment_count.plot.barh(color = '#2acaea')
plot.pyplot.title('Apartment')
plot.pyplot.xlabel('# of Reports')
plot.pyplot.ylabel('Crime Type')

"""**Graph 2 & 3:** From the code extraction above, the most reported crime types: burglaries and larceny-thefts. The graphs look at the premise that is associated with the highest crime type. 

**Note:** For legibility purposes, only the first 10 results were graphed. 
"""

#--- Data Collection --- 
test = crime_stats.groupby('UCR CRIME CATEGORY')

burglary = test.get_group('BURGLARY')
b_count = burglary['PREMISE TYPE'].value_counts().head(10) #count by burgarly in premise 

larceny = test.get_group('LARCENY-THEFT')
l_count = larceny['PREMISE TYPE'].value_counts().head(10)

#---- GRAPH ---- 
plot.pyplot.subplots(1)
l_count.plot(kind='barh', color = 'orange')
plot.pyplot.title('Larceny-Theft')
plot.pyplot.xlabel('# of Reports')
plot.pyplot.ylabel('Premise Type')

plot.pyplot.subplots(1)
b_count.plot(kind = 'barh', color = '#9ad4ea')
plot.pyplot.title('Burglary')
plot.pyplot.xlabel('# of Reports')
plot.pyplot.ylabel('Premise Type')